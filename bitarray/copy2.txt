copy2() in _bitarray.c
======================

The function copy2() is tricky.  The following variable names are used to
in this document (as well as in the source code):

    self      bitarray object bits are copies onto
    a         start bit (in self) bits are copied onto
    other     bitarray object bits are copied from
    b         start bit (in other) bits are copied from
    n         number of bits being copied

These variables (as well as the signature) of copy2() are the same as for
copy_n(), which only performs aligned copies (using memmove()) when both
a and b are multiples of 8.

The steps copy2() performs are the following:

1.) If n is smaller than a small limit or if both a and b are multiples
    of 8, call copy_n() and return.

2.) Calculate the following byte positions:
    p1: start (in self) memory is copied to, i.e. a / 8
    p2: last (in self) memory is copied to, i.e. (a + n - 1) / 8
    p3: first (in other) memory is copied from, i.e. b / 8

3.) Store temporary bytes corresponding to p1, p2, p3 in t1, t2, t3.
    We need these bytes later to restore bits which got overwritten or
    shifted away.

4.) Calculate the total right shift of bytes p1..p2 (once copied into self).
    Note that this shift depends on a % 8 and b % 8.

5.) Copy, using copy_n(), the byte region from other at p3 into self at p1.
    Note that (since b is usually not a multiple of 8) we miss the beginning
    in few bytes.  This is why we need t3, and this those bits later.

6.) Right shift self in byte range p1..p2.  This region includes the
    bit-range(a, a + n), but is generally larger.  This is why we need t1
    and t2 to restore the bytes at p1 and p2 in self later.

7.) Restore bits in self at:
    - p1 using t1 (those got overwritten and shifted)
    - p2 using t2 (those got shifted)

8.) Copy the first few bits from other to self (using t3, see step 5).


That's it!

Here is an example with the following parameters:
a = 13
b = 6
n = 39
p1 = 1
p2 = 6
p3 = 0

other
bitarray('00010011 01100011 00001000 11111100 10100111 01100100 10010011 10')
                ^^ ^^^^^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^^
                   ======== ======== ======== ======== =====
self
bitarray('01001001 11011001 01000110 11100001 10100110 11110111 01001010')
                        ^^^ ^^^^^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^^^^^ ^^^^
                   ======== ======== ======== ======== =====
bitarray('01001001 01100011 00001000 11111100 10100111 01100111 01001010')
rshift 7
                   >>>>>>>> >>>>>>>> >>>>>>>> >>>>>>>> >>>>>>>> >>>>>>>>
bitarray('01001001 00000000 11000110 00010001 11111001 01001110 11001110')
                          = ======== ======== ======== ======== ====
                   11111
                                                                    2222
                        33
bitarray('01001001 11011110 11000110 00010001 11111001 01001110 11001010')
